# ============================================================================
# MONITOR DE FINDINGS E ALERTAS - FSx COMPLIANCE POC
# ============================================================================
# Este script monitora os findings do Macie e exibe relat√≥rios detalhados
# dos dados sens√≠veis detectados na solu√ß√£o de compliance
# ============================================================================

param(
    [string]$AWSRegion = "us-east-1",
    [int]$MaxFindings = 50,
    [switch]$ShowDetails,
    [switch]$ExportReport,
    [string]$ReportPath = "C:\ComplianceReports",
    [switch]$Continuous,
    [int]$RefreshInterval = 300  # 5 minutos
)

Write-Host "=== FSx COMPLIANCE POC - MONITOR DE FINDINGS ===" -ForegroundColor Cyan
Write-Host "Monitorando detec√ß√µes de dados sens√≠veis do Amazon Macie" -ForegroundColor Yellow
Write-Host ""

# Verificar AWS CLI
try {
    $awsVersion = aws --version 2>$null
    Write-Host "‚úÖ AWS CLI: $($awsVersion.Split()[0])" -ForegroundColor Green
} catch {
    Write-Host "‚ùå AWS CLI n√£o encontrado" -ForegroundColor Red
    exit 1
}

# Fun√ß√£o para obter findings do Macie
function Get-MacieFindings {
    param([int]$MaxResults = 50)
    
    try {
        Write-Host "üîç Buscando findings do Macie..." -ForegroundColor Yellow
        
        # Listar IDs dos findings
        $findingIds = aws macie2 list-findings --region $AWSRegion --max-items $MaxResults --output json | ConvertFrom-Json
        
        if (!$findingIds.findingIds -or $findingIds.findingIds.Count -eq 0) {
            return @{
                Count = 0
                Findings = @()
                Message = "Nenhum finding encontrado"
            }
        }
        
        Write-Host "üìä Encontrados $($findingIds.findingIds.Count) findings" -ForegroundColor Green
        
        # Obter detalhes dos findings (em lotes de 50)
        $allFindings = @()
        $batchSize = 50
        
        for ($i = 0; $i -lt $findingIds.findingIds.Count; $i += $batchSize) {
            $batch = $findingIds.findingIds[$i..([Math]::Min($i + $batchSize - 1, $findingIds.findingIds.Count - 1))]
            $batchJson = $batch | ConvertTo-Json -Compress
            
            try {
                $findingDetails = aws macie2 get-findings --finding-ids $batchJson --region $AWSRegion --output json | ConvertFrom-Json
                $allFindings += $findingDetails.findings
            } catch {
                Write-Host "‚ö†Ô∏è  Erro ao obter detalhes do lote $($i/$batchSize): $($_.Exception.Message)" -ForegroundColor Yellow
            }
        }
        
        return @{
            Count = $allFindings.Count
            Findings = $allFindings
            Message = "Findings carregados com sucesso"
        }
        
    } catch {
        return @{
            Count = 0
            Findings = @()
            Message = "Erro ao acessar Macie: $($_.Exception.Message)"
        }
    }
}

# Fun√ß√£o para formatar findings
function Format-FindingReport {
    param($Findings)
    
    if ($Findings.Count -eq 0) {
        Write-Host "‚ÑπÔ∏è  Nenhum finding para exibir" -ForegroundColor Blue
        return
    }
    
    Write-Host ""
    Write-Host "=== RELAT√ìRIO DE FINDINGS ===" -ForegroundColor Cyan
    Write-Host "Total de findings: $($Findings.Count)" -ForegroundColor White
    Write-Host ""
    
    # Agrupar por severidade
    $severityGroups = $Findings | Group-Object severity
    Write-Host "üìä DISTRIBUI√á√ÉO POR SEVERIDADE:" -ForegroundColor Yellow
    foreach ($group in $severityGroups) {
        $color = switch ($group.Name) {
            "HIGH" { "Red" }
            "MEDIUM" { "Yellow" }
            "LOW" { "Green" }
            default { "White" }
        }
        Write-Host "   $($group.Name): $($group.Count) findings" -ForegroundColor $color
    }
    
    Write-Host ""
    
    # Agrupar por tipo
    $typeGroups = $Findings | Group-Object type
    Write-Host "üîç DISTRIBUI√á√ÉO POR TIPO:" -ForegroundColor Yellow
    foreach ($group in $typeGroups) {
        Write-Host "   $($group.Name): $($group.Count) findings" -ForegroundColor White
    }
    
    Write-Host ""
    
    # Findings mais recentes
    $recentFindings = $Findings | Sort-Object createdAt -Descending | Select-Object -First 10
    Write-Host "üïí FINDINGS MAIS RECENTES (Top 10):" -ForegroundColor Yellow
    
    foreach ($finding in $recentFindings) {
        $createdAt = [DateTime]::Parse($finding.createdAt).ToString("dd/MM/yyyy HH:mm")
        $severityColor = switch ($finding.severity) {
            "HIGH" { "Red" }
            "MEDIUM" { "Yellow" }
            "LOW" { "Green" }
            default { "White" }
        }
        
        Write-Host ""
        Write-Host "   üìÑ Finding ID: $($finding.id)" -ForegroundColor Gray
        Write-Host "   üìÖ Data: $createdAt" -ForegroundColor White
        Write-Host "   ‚ö†Ô∏è  Severidade: $($finding.severity)" -ForegroundColor $severityColor
        Write-Host "   üè∑Ô∏è  Tipo: $($finding.type)" -ForegroundColor White
        
        if ($finding.resourcesAffected -and $finding.resourcesAffected.s3Object) {
            $s3Object = $finding.resourcesAffected.s3Object
            Write-Host "   üìÅ Arquivo: $($s3Object.key)" -ForegroundColor Cyan
            Write-Host "   ü™£ Bucket: $($s3Object.bucketName)" -ForegroundColor Cyan
        }
        
        if ($ShowDetails -and $finding.classificationDetails) {
            Write-Host "   üîç Detalhes da Classifica√ß√£o:" -ForegroundColor Yellow
            
            if ($finding.classificationDetails.result) {
                $result = $finding.classificationDetails.result
                Write-Host "      Status: $($result.status)" -ForegroundColor White
                
                if ($result.customDataIdentifiers) {
                    Write-Host "      Identificadores Customizados:" -ForegroundColor White
                    foreach ($cdi in $result.customDataIdentifiers.detections) {
                        Write-Host "        ‚Ä¢ $($cdi.name): $($cdi.count) ocorr√™ncias" -ForegroundColor Gray
                    }
                }
                
                if ($result.sensitiveData) {
                    Write-Host "      Dados Sens√≠veis Detectados:" -ForegroundColor White
                    foreach ($category in $result.sensitiveData) {
                        Write-Host "        ‚Ä¢ Categoria: $($category.category)" -ForegroundColor Gray
                        if ($category.detections) {
                            foreach ($detection in $category.detections) {
                                Write-Host "          - Tipo: $($detection.type)" -ForegroundColor DarkGray
                                Write-Host "          - Ocorr√™ncias: $($detection.count)" -ForegroundColor DarkGray
                            }
                        }
                    }
                }
            }
        }
        
        Write-Host "   " + ("-" * 50) -ForegroundColor DarkGray
    }
}

# Fun√ß√£o para exportar relat√≥rio
function Export-FindingReport {
    param($Findings, $ReportPath)
    
    if (!(Test-Path $ReportPath)) {
        New-Item -ItemType Directory -Path $ReportPath -Force | Out-Null
    }
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $reportFile = Join-Path $ReportPath "MacieFindings_$timestamp.json"
    $summaryFile = Join-Path $ReportPath "MacieSummary_$timestamp.txt"
    
    # Exportar JSON completo
    $Findings | ConvertTo-Json -Depth 10 | Out-File -FilePath $reportFile -Encoding UTF8
    
    # Criar resumo em texto
    $summary = @"
=== RELAT√ìRIO DE COMPLIANCE - FSx + Macie ===
Gerado em: $(Get-Date -Format "dd/MM/yyyy HH:mm:ss")
Regi√£o AWS: $AWSRegion

RESUMO EXECUTIVO:
- Total de Findings: $($Findings.Count)
- Findings de Alta Severidade: $(($Findings | Where-Object {$_.severity -eq "HIGH"}).Count)
- Findings de M√©dia Severidade: $(($Findings | Where-Object {$_.severity -eq "MEDIUM"}).Count)
- Findings de Baixa Severidade: $(($Findings | Where-Object {$_.severity -eq "LOW"}).Count)

TIPOS DE DADOS SENS√çVEIS DETECTADOS:
$($Findings | Group-Object type | ForEach-Object { "- $($_.Name): $($_.Count) ocorr√™ncias" } | Out-String)

ARQUIVOS MAIS AFETADOS:
$($Findings | Where-Object {$_.resourcesAffected.s3Object} | 
  Group-Object {$_.resourcesAffected.s3Object.key} | 
  Sort-Object Count -Descending | 
  Select-Object -First 10 | 
  ForEach-Object { "- $($_.Name): $($_.Count) findings" } | Out-String)

RECOMENDA√á√ïES:
1. Revisar arquivos com findings de alta severidade
2. Implementar controles de acesso mais restritivos
3. Considerar criptografia adicional para dados sens√≠veis
4. Treinar usu√°rios sobre pol√≠ticas de dados sens√≠veis
5. Implementar monitoramento cont√≠nuo

=== FIM DO RELAT√ìRIO ===
"@
    
    $summary | Out-File -FilePath $summaryFile -Encoding UTF8
    
    Write-Host "üìÑ Relat√≥rio exportado:" -ForegroundColor Green
    Write-Host "   JSON: $reportFile" -ForegroundColor Gray
    Write-Host "   Resumo: $summaryFile" -ForegroundColor Gray
}

# Fun√ß√£o para monitoramento cont√≠nuo
function Start-ContinuousMonitoring {
    param($RefreshInterval)
    
    Write-Host "üîÑ Iniciando monitoramento cont√≠nuo..." -ForegroundColor Cyan
    Write-Host "   Intervalo de atualiza√ß√£o: $RefreshInterval segundos" -ForegroundColor Gray
    Write-Host "   Pressione Ctrl+C para parar" -ForegroundColor Gray
    Write-Host ""
    
    $lastCount = 0
    
    while ($true) {
        try {
            Clear-Host
            Write-Host "=== MONITORAMENTO CONT√çNUO - $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss') ===" -ForegroundColor Cyan
            
            $result = Get-MacieFindings -MaxResults $MaxFindings
            
            if ($result.Count -ne $lastCount) {
                Write-Host "üîî NOVOS FINDINGS DETECTADOS!" -ForegroundColor Red
                Write-Host "   Anterior: $lastCount | Atual: $($result.Count)" -ForegroundColor Yellow
                $lastCount = $result.Count
            }
            
            Format-FindingReport -Findings $result.Findings
            
            Write-Host ""
            Write-Host "‚è∞ Pr√≥xima atualiza√ß√£o em $RefreshInterval segundos..." -ForegroundColor Gray
            Start-Sleep -Seconds $RefreshInterval
            
        } catch {
            Write-Host "‚ùå Erro no monitoramento: $($_.Exception.Message)" -ForegroundColor Red
            Start-Sleep -Seconds 30
        }
    }
}

# Execu√ß√£o principal
try {
    if ($Continuous) {
        Start-ContinuousMonitoring -RefreshInterval $RefreshInterval
    } else {
        $result = Get-MacieFindings -MaxResults $MaxFindings
        
        Write-Host $result.Message -ForegroundColor $(if ($result.Count -gt 0) { "Green" } else { "Blue" })
        
        if ($result.Count -gt 0) {
            Format-FindingReport -Findings $result.Findings
            
            if ($ExportReport) {
                Export-FindingReport -Findings $result.Findings -ReportPath $ReportPath
            }
        }
        
        Write-Host ""
        Write-Host "üí° DICAS:" -ForegroundColor Cyan
        Write-Host "   ‚Ä¢ Use -ShowDetails para ver detalhes completos" -ForegroundColor White
        Write-Host "   ‚Ä¢ Use -ExportReport para salvar relat√≥rios" -ForegroundColor White
        Write-Host "   ‚Ä¢ Use -Continuous para monitoramento em tempo real" -ForegroundColor White
        Write-Host "   ‚Ä¢ Verifique tamb√©m o console do Macie: https://console.aws.amazon.com/macie/" -ForegroundColor White
    }
    
} catch {
    Write-Host "‚ùå Erro na execu√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "‚úÖ Monitoramento conclu√≠do!" -ForegroundColor Green
