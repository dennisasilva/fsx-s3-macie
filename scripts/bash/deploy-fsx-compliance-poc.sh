#!/bin/bash

# Script de Deploy para FSx Compliance PoC - SEM KEY PAIR
# Esta vers√£o usa AWS Systems Manager Session Manager em vez de RDP
# Vers√£o otimizada com cache de email e tratamento de ROLLBACK_COMPLETE
#
# TIMEOUTS CONFIGURADOS:
# - CloudFormation Deploy: 1h 20min (4800s) read + 5 minutos (300s) connect
# - CloudFormation Wait: 1h 20min (4800s) para aguardar conclus√£o das stacks

set -e

# Definir diret√≥rio base do projeto
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
CLOUDFORMATION_DIR="$PROJECT_ROOT/cloudformation"
CONFIG_DIR="$PROJECT_ROOT/config"

# Configura√ß√µes
PROJECT_NAME="fsx-compliance-poc"
REGION="us-east-1"
NOTIFICATION_EMAIL=""

# Arquivo para cache de configura√ß√µes
CONFIG_FILE="$CONFIG_DIR/.fsx-compliance-config"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

critical() {
    echo -e "${CYAN}[CRITICAL]${NC} $1"
}

# Fun√ß√£o para salvar configura√ß√µes
save_config() {
    cat > "$CONFIG_FILE" << EOF
# FSx Compliance PoC - Configura√ß√µes Salvas
# Gerado automaticamente em $(date)
NOTIFICATION_EMAIL="$NOTIFICATION_EMAIL"
REGION="$REGION"
PROJECT_NAME="$PROJECT_NAME"
LAST_DEPLOY=$(date +%s)
EOF
    success "Configura√ß√µes salvas em $CONFIG_FILE"
}

# Fun√ß√£o para carregar configura√ß√µes
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        info "Configura√ß√µes carregadas de $CONFIG_FILE"
        
        # Mostrar configura√ß√µes carregadas
        if [ ! -z "$NOTIFICATION_EMAIL" ]; then
            info "Email salvo: $NOTIFICATION_EMAIL"
        fi
        if [ ! -z "$REGION" ]; then
            info "Regi√£o salva: $REGION"
        fi
        
        return 0
    else
        info "Nenhuma configura√ß√£o salva encontrada"
        return 1
    fi
}

# Fun√ß√£o para limpar configura√ß√µes
clear_config() {
    if [ -f "$CONFIG_FILE" ]; then
        rm "$CONFIG_FILE"
        success "Configura√ß√µes limpas"
    else
        warning "Nenhuma configura√ß√£o para limpar"
    fi
}

# Fun√ß√£o para verificar status da stack
get_stack_status() {
    local stack_name=$1
    aws cloudformation describe-stacks \
        --stack-name "$stack_name" \
        --region "$REGION" \
        --query 'Stacks[0].StackStatus' \
        --output text 2>/dev/null || echo "NOT_FOUND"
}

# Fun√ß√£o para deletar stack em ROLLBACK_COMPLETE
delete_failed_stack() {
    local stack_name=$1
    
    warning "Stack $stack_name est√° em estado ROLLBACK_COMPLETE"
    echo ""
    echo "Op√ß√µes dispon√≠veis:"
    echo "1. Deletar a stack e recriar (recomendado)"
    echo "2. Cancelar opera√ß√£o"
    echo ""
    read -p "Escolha uma op√ß√£o (1/2): " choice
    
    case $choice in
        1)
            log "Deletando stack $stack_name..."
            aws cloudformation delete-stack \
                --stack-name "$stack_name" \
                --region "$REGION"
            
            log "Aguardando conclus√£o da dele√ß√£o..."
            aws cloudformation wait stack-delete-complete \
                --stack-name "$stack_name" \
                --region "$REGION" \
                --cli-read-timeout 4800
            
            success "Stack $stack_name deletada com sucesso!"
            return 0
            ;;
        2)
            info "Opera√ß√£o cancelada pelo usu√°rio"
            return 1
            ;;
        *)
            error "Op√ß√£o inv√°lida"
            return 1
            ;;
    esac
}

# Fun√ß√£o para verificar e tratar estados problem√°ticos
check_and_fix_stack_state() {
    local stack_name=$1
    local status=$(get_stack_status "$stack_name")
    
    case $status in
        "ROLLBACK_COMPLETE")
            critical "Stack $stack_name em estado ROLLBACK_COMPLETE"
            if delete_failed_stack "$stack_name"; then
                return 0  # Stack deletada, pode prosseguir
            else
                return 1  # Usu√°rio cancelou
            fi
            ;;
        "ROLLBACK_IN_PROGRESS")
            warning "Stack $stack_name em rollback. Aguardando conclus√£o..."
            aws cloudformation wait stack-rollback-complete \
                --stack-name "$stack_name" \
                --region "$REGION" \
                --cli-read-timeout 4800
            # Ap√≥s rollback, vai ficar ROLLBACK_COMPLETE, ent√£o chama recursivamente
            check_and_fix_stack_state "$stack_name"
            ;;
        "DELETE_IN_PROGRESS")
            info "Stack $stack_name sendo deletada. Aguardando conclus√£o..."
            aws cloudformation wait stack-delete-complete \
                --stack-name "$stack_name" \
                --region "$REGION" \
                --cli-read-timeout 4800
            return 0
            ;;
        "CREATE_IN_PROGRESS"|"UPDATE_IN_PROGRESS")
            warning "Stack $stack_name em progresso. Aguardando conclus√£o..."
            # Aguardar conclus√£o (pode ser sucesso ou falha)
            sleep 30
            check_and_fix_stack_state "$stack_name"
            ;;
        "CREATE_FAILED")
            warning "Stack $stack_name falhou na cria√ß√£o"
            if delete_failed_stack "$stack_name"; then
                return 0
            else
                return 1
            fi
            ;;
        "UPDATE_ROLLBACK_COMPLETE")
            warning "Stack $stack_name teve update com rollback"
            info "Stack pode ser atualizada normalmente"
            return 0
            ;;
        "CREATE_COMPLETE"|"UPDATE_COMPLETE")
            info "Stack $stack_name em estado v√°lido: $status"
            return 0
            ;;
        "NOT_FOUND")
            info "Stack $stack_name n√£o existe (ser√° criada)"
            return 0
            ;;
        *)
            warning "Stack $stack_name em estado desconhecido: $status"
            return 0
            ;;
    esac
}

# Verificar pr√©-requisitos
check_prerequisites() {
    log "Verificando pr√©-requisitos..."
    
    # Verificar AWS CLI
    if ! command -v aws &> /dev/null; then
        error "AWS CLI n√£o encontrado. Instale o AWS CLI primeiro."
        exit 1
    fi
    
    # Verificar credenciais AWS
    if ! aws sts get-caller-identity &> /dev/null; then
        error "Credenciais AWS n√£o configuradas. Execute 'aws configure' primeiro."
        exit 1
    fi
    
    # Carregar configura√ß√µes salvas
    load_config || true
    
    # Verificar se o email foi fornecido ou est√° salvo
    if [ -z "$NOTIFICATION_EMAIL" ]; then
        echo ""
        info "üìß Configura√ß√£o de Email para Notifica√ß√µes"
        echo "Este email receber√° alertas de compliance em tempo real."
        echo ""
        read -p "Digite o email para notifica√ß√µes de compliance: " NOTIFICATION_EMAIL
        if [ -z "$NOTIFICATION_EMAIL" ]; then
            error "Email √© obrigat√≥rio para receber notifica√ß√µes."
            exit 1
        fi
        
        # Validar formato do email (b√°sico)
        if [[ ! "$NOTIFICATION_EMAIL" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
            error "Formato de email inv√°lido. Por favor, digite um email v√°lido."
            exit 1
        fi
        
        # Perguntar se quer salvar
        echo ""
        read -p "Deseja salvar este email para pr√≥ximos deploys? (y/N): " save_choice
        if [ "$save_choice" = "y" ] || [ "$save_choice" = "Y" ]; then
            save_config
        fi
    else
        echo ""
        info "üìß Usando email salvo: $NOTIFICATION_EMAIL"
        read -p "Deseja usar este email ou digitar um novo? (usar/novo): " email_choice
        if [ "$email_choice" = "novo" ]; then
            read -p "Digite o novo email: " new_email
            if [ ! -z "$new_email" ]; then
                NOTIFICATION_EMAIL="$new_email"
                # Validar formato do email
                if [[ ! "$NOTIFICATION_EMAIL" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
                    error "Formato de email inv√°lido."
                    exit 1
                fi
                save_config
            fi
        fi
    fi
    
    success "Pr√©-requisitos verificados com sucesso!"
    warning "Esta vers√£o usa AWS Systems Manager Session Manager (sem key-pair)"
}

# Fun√ß√£o para fazer deploy de uma stack com tratamento de erros
deploy_stack() {
    local stack_name=$1
    local template_file=$2
    local parameters=$3
    
    log "Fazendo deploy da stack: $stack_name"
    
    # Verificar se template existe
    if [ ! -f "$template_file" ]; then
        error "Template n√£o encontrado: $template_file"
        return 1
    fi
    
    # Verificar e corrigir estado da stack
    if ! check_and_fix_stack_state "$stack_name"; then
        error "N√£o foi poss√≠vel corrigir o estado da stack $stack_name"
        return 1
    fi
    
    # Mostrar par√¢metros que ser√£o usados
    info "Par√¢metros: $parameters"
    
    # Tentar deploy com retry
    local max_attempts=3
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        log "Tentativa $attempt/$max_attempts para deploy de $stack_name"
        
        if aws cloudformation deploy \
            --template-file "$template_file" \
            --stack-name "$stack_name" \
            --parameter-overrides $parameters \
            --capabilities CAPABILITY_NAMED_IAM \
            --region "$REGION" \
            --no-fail-on-empty-changeset \
            --cli-read-timeout 4800 \
            --cli-connect-timeout 300; then
            
            success "Stack $stack_name deployada com sucesso!"
            return 0
        else
            local exit_code=$?
            warning "Tentativa $attempt falhou (exit code: $exit_code)"
            
            # Verificar se a stack ficou em estado problem√°tico
            local current_status=$(get_stack_status "$stack_name")
            if [ "$current_status" = "ROLLBACK_COMPLETE" ] || [ "$current_status" = "CREATE_FAILED" ]; then
                warning "Stack ficou em estado problem√°tico: $current_status"
                if [ $attempt -lt $max_attempts ]; then
                    if check_and_fix_stack_state "$stack_name"; then
                        attempt=$((attempt + 1))
                        continue
                    else
                        break
                    fi
                fi
            fi
            
            attempt=$((attempt + 1))
            if [ $attempt -le $max_attempts ]; then
                warning "Aguardando 30 segundos antes da pr√≥xima tentativa..."
                sleep 30
            fi
        fi
    done
    
    error "Falha no deploy da stack $stack_name ap√≥s $max_attempts tentativas"
    return 1
}

# Deploy da infraestrutura principal
deploy_main_infrastructure() {
    log "Iniciando deploy da infraestrutura principal..."
    
    deploy_stack \
        "${PROJECT_NAME}-main" \
        "$CLOUDFORMATION_DIR/fsx-compliance-main.yaml" \
        "ProjectName=$PROJECT_NAME NotificationEmail=$NOTIFICATION_EMAIL"
}

# Deploy do FSx e S3
deploy_storage() {
    log "Iniciando deploy do FSx e S3..."
    
    deploy_stack \
        "${PROJECT_NAME}-storage" \
        "$CLOUDFORMATION_DIR/fsx-storage.yaml" \
        "MainStackName=${PROJECT_NAME}-main FSxStorageCapacity=32"
}

# Deploy do Macie e processamento
deploy_macie() {
    log "Iniciando deploy do Macie e processamento..."
    
    deploy_stack \
        "${PROJECT_NAME}-macie" \
        "$CLOUDFORMATION_DIR/macie-processing.yaml" \
        "MainStackName=${PROJECT_NAME}-main StorageStackName=${PROJECT_NAME}-storage"
}

# Deploy do cliente Windows (SEM KEY PAIR)
deploy_windows_client() {
    log "Iniciando deploy do cliente Windows (SEM key-pair)..."
    
    deploy_stack \
        "${PROJECT_NAME}-windows" \
        "$CLOUDFORMATION_DIR/windows-client.yaml" \
        "MainStackName=${PROJECT_NAME}-main StorageStackName=${PROJECT_NAME}-storage InstanceType=t3.medium"
}

# Verificar status das stacks
check_stack_status() {
    log "Verificando status das stacks..."
    
    local stacks=(
        "${PROJECT_NAME}-main"
        "${PROJECT_NAME}-storage"
        "${PROJECT_NAME}-macie"
        "${PROJECT_NAME}-windows"
    )
    
    echo ""
    printf "%-30s %-25s %-30s\n" "STACK NAME" "STATUS" "LAST UPDATED"
    printf "%-30s %-25s %-30s\n" "----------" "------" "------------"
    
    for stack in "${stacks[@]}"; do
        local status=$(get_stack_status "$stack")
        local last_updated=$(aws cloudformation describe-stacks --stack-name "$stack" --region "$REGION" --query 'Stacks[0].LastUpdatedTime' --output text 2>/dev/null || echo "N/A")
        
        case $status in
            "CREATE_COMPLETE"|"UPDATE_COMPLETE")
                printf "%-30s ${GREEN}%-25s${NC} %-30s\n" "$stack" "$status" "$last_updated"
                ;;
            "ROLLBACK_COMPLETE"|"CREATE_FAILED"|"UPDATE_FAILED")
                printf "%-30s ${RED}%-25s${NC} %-30s\n" "$stack" "$status" "$last_updated"
                ;;
            "CREATE_IN_PROGRESS"|"UPDATE_IN_PROGRESS"|"DELETE_IN_PROGRESS")
                printf "%-30s ${YELLOW}%-25s${NC} %-30s\n" "$stack" "$status" "$last_updated"
                ;;
            "NOT_FOUND")
                printf "%-30s ${CYAN}%-25s${NC} %-30s\n" "$stack" "$status" "$last_updated"
                ;;
            *)
                printf "%-30s ${YELLOW}%-25s${NC} %-30s\n" "$stack" "$status" "$last_updated"
                ;;
        esac
    done
    echo ""
    
    # Mostrar legend
    echo "Legenda:"
    echo -e "  ${GREEN}Verde${NC}: Stack funcionando corretamente"
    echo -e "  ${RED}Vermelho${NC}: Stack com problemas (pode precisar ser deletada)"
    echo -e "  ${YELLOW}Amarelo${NC}: Stack em progresso ou estado transit√≥rio"
    echo -e "  ${CYAN}Ciano${NC}: Stack n√£o existe"
}

# Fun√ß√£o para cleanup com tratamento de estados
cleanup() {
    log "Iniciando cleanup da infraestrutura..."
    
    local stacks=(
        "${PROJECT_NAME}-windows"
        "${PROJECT_NAME}-macie"
        "${PROJECT_NAME}-storage"
        "${PROJECT_NAME}-main"
    )
    
    echo ""
    warning "‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° REMOVER TODA a infraestrutura!"
    echo ""
    echo "Stacks que ser√£o removidas:"
    for stack in "${stacks[@]}"; do
        local status=$(get_stack_status "$stack")
        echo "  - $stack ($status)"
    done
    echo ""
    read -p "Digite 'DELETE' para confirmar a remo√ß√£o: " confirm
    
    if [ "$confirm" = "DELETE" ]; then
        for stack in "${stacks[@]}"; do
            local status=$(get_stack_status "$stack")
            
            if [ "$status" != "NOT_FOUND" ]; then
                log "Removendo stack: $stack (status: $status)"
                
                # Se stack est√° em ROLLBACK_COMPLETE, pode deletar diretamente
                aws cloudformation delete-stack --stack-name "$stack" --region "$REGION"
                
                # Aguardar dele√ß√£o se n√£o for a √∫ltima stack
                if [ "$stack" != "${PROJECT_NAME}-main" ]; then
                    log "Aguardando dele√ß√£o de $stack..."
                    aws cloudformation wait stack-delete-complete \
                        --stack-name "$stack" \
                        --region "$REGION" \
                        --cli-read-timeout 4800 || true
                fi
            else
                info "Stack $stack n√£o existe, pulando..."
            fi
        done
        
        warning "Cleanup iniciado. Aguardando conclus√£o da √∫ltima stack..."
        aws cloudformation wait stack-delete-complete \
            --stack-name "${PROJECT_NAME}-main" \
            --region "$REGION" \
            --cli-read-timeout 4800 || true
        
        success "Cleanup conclu√≠do!"
    else
        info "Cleanup cancelado."
    fi
}

# Fun√ß√£o para corrigir stacks problem√°ticas
fix_problematic_stacks() {
    log "Verificando e corrigindo stacks problem√°ticas..."
    
    local stacks=(
        "${PROJECT_NAME}-main"
        "${PROJECT_NAME}-storage"
        "${PROJECT_NAME}-macie"
        "${PROJECT_NAME}-windows"
    )
    
    local fixed_count=0
    
    for stack in "${stacks[@]}"; do
        local status=$(get_stack_status "$stack")
        
        case $status in
            "ROLLBACK_COMPLETE"|"CREATE_FAILED")
                warning "Stack problem√°tica encontrada: $stack ($status)"
                if check_and_fix_stack_state "$stack"; then
                    fixed_count=$((fixed_count + 1))
                    success "Stack $stack corrigida"
                else
                    error "N√£o foi poss√≠vel corrigir $stack"
                fi
                ;;
            "NOT_FOUND")
                info "Stack $stack n√£o existe (OK)"
                ;;
            *)
                info "Stack $stack em estado v√°lido: $status"
                ;;
        esac
    done
    
    if [ $fixed_count -gt 0 ]; then
        success "$fixed_count stack(s) corrigida(s)"
    else
        info "Nenhuma stack problem√°tica encontrada"
    fi
}

# Obter outputs importantes (fun√ß√£o existente mantida)
get_outputs() {
    log "Obtendo informa√ß√µes importantes da infraestrutura..."
    
    echo ""
    echo "=== INFORMA√á√ïES DA INFRAESTRUTURA ==="
    echo ""
    
    # FSx DNS Name
    local fsx_dns=$(aws cloudformation describe-stacks \
        --stack-name "${PROJECT_NAME}-storage" \
        --region "$REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`FSxDNSName`].OutputValue' \
        --output text 2>/dev/null || echo "N/A")
    echo "FSx DNS Name: $fsx_dns"
    
    # S3 Bucket
    local s3_bucket=$(aws cloudformation describe-stacks \
        --stack-name "${PROJECT_NAME}-storage" \
        --region "$REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`ComplianceBucketName`].OutputValue' \
        --output text 2>/dev/null || echo "N/A")
    echo "S3 Compliance Bucket: $s3_bucket"
    
    # Windows Instance IP
    local windows_ip=$(aws cloudformation describe-stacks \
        --stack-name "${PROJECT_NAME}-windows" \
        --region "$REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`WindowsInstancePrivateIP`].OutputValue' \
        --output text 2>/dev/null || echo "N/A")
    echo "Windows Instance IP: $windows_ip"
    
    # Windows Instance ID
    local instance_id=$(aws cloudformation describe-stacks \
        --stack-name "${PROJECT_NAME}-windows" \
        --region "$REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`WindowsInstanceId`].OutputValue' \
        --output text 2>/dev/null || echo "N/A")
    echo "Windows Instance ID: $instance_id"
    
    # SNS Topic
    local sns_topic=$(aws cloudformation describe-stacks \
        --stack-name "${PROJECT_NAME}-macie" \
        --region "$REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`ComplianceAlertsTopicArn`].OutputValue' \
        --output text 2>/dev/null || echo "N/A")
    echo "SNS Topic ARN: $sns_topic"
    
    echo ""
    echo "=== ACESSO √Ä INST√ÇNCIA WINDOWS (SEM KEY-PAIR) ==="
    echo ""
    echo "üîß Para conectar √† inst√¢ncia Windows, use AWS Systems Manager:"
    echo ""
    echo "1. Via AWS CLI:"
    echo "   aws ssm start-session --target $instance_id --region $REGION"
    echo ""
    echo "2. Via Console AWS:"
    echo "   - Acesse EC2 Console"
    echo "   - Selecione a inst√¢ncia: $instance_id"
    echo "   - Clique em 'Connect' ‚Üí 'Session Manager'"
    echo ""
    echo "3. Para PowerShell na inst√¢ncia:"
    echo "   aws ssm start-session --target $instance_id --region $REGION --document-name AWS-StartPowerShellSession"
    echo ""
    
    echo "=== FUNCIONAMENTO AUTOMATIZADO ==="
    echo ""
    echo "‚úÖ A solu√ß√£o funciona COMPLETAMENTE AUTOMATIZADA:"
    echo ""
    echo "1. ü§ñ Inst√¢ncia Windows se configura automaticamente"
    echo "2. üìÅ Cria arquivos de teste com dados sens√≠veis"
    echo "3. üîÑ Sincroniza arquivos FSx ‚Üí S3 automaticamente"
    echo "4. üîç Macie escaneia e detecta dados sens√≠veis"
    echo "5. üì® Envia alertas para: $NOTIFICATION_EMAIL"
    echo "6. ‚è∞ Sincroniza√ß√£o agendada diariamente √†s 02:00"
    echo ""
    echo "=== MONITORAMENTO ==="
    echo ""
    echo "üìä Verifique os seguintes locais:"
    echo "- Email: $NOTIFICATION_EMAIL (alertas de compliance)"
    echo "- S3 Bucket: $s3_bucket"
    echo "- Macie Console: https://console.aws.amazon.com/macie/"
    echo "- CloudWatch Logs: /aws/lambda/fsx-compliance-poc-*"
    echo ""
    echo "‚è±Ô∏è Aguarde 10-15 minutos ap√≥s o deploy para ver os primeiros alertas!"
    echo ""
    
    # Salvar informa√ß√µes em arquivo
    cat > "$CONFIG_DIR/deployment-info.txt" << EOF
FSx Compliance PoC - Deployment Information
Generated: $(date)

Infrastructure:
- FSx DNS Name: $fsx_dns
- S3 Bucket: $s3_bucket
- Windows Instance IP: $windows_ip
- Windows Instance ID: $instance_id
- SNS Topic: $sns_topic
- Notification Email: $NOTIFICATION_EMAIL
- Region: $REGION

Access Commands:
- Session Manager: aws ssm start-session --target $instance_id --region $REGION
- PowerShell: aws ssm start-session --target $instance_id --region $REGION --document-name AWS-StartPowerShellSession

Monitoring:
- Macie Console: https://console.aws.amazon.com/macie/
- S3 Console: https://s3.console.aws.amazon.com/s3/buckets/$s3_bucket
- CloudWatch: https://console.aws.amazon.com/cloudwatch/
EOF
    
    success "Informa√ß√µes salvas em $CONFIG_DIR/deployment-info.txt"
}

# Menu principal
show_menu() {
    echo ""
    echo "=== FSx Compliance PoC - Deploy Script (SEM KEY-PAIR) ==="
    echo ""
    echo "üîß Esta vers√£o usa AWS Systems Manager Session Manager"
    echo "ü§ñ Funcionamento completamente automatizado"
    echo "üõ†Ô∏è Tratamento autom√°tico de stacks em ROLLBACK_COMPLETE"
    if [ -f "$CONFIG_FILE" ]; then
        echo "üíæ Configura√ß√µes salvas encontradas"
    fi
    echo ""
    echo "1. Deploy completo (todas as stacks)"
    echo "2. Deploy infraestrutura principal"
    echo "3. Deploy FSx e S3"
    echo "4. Deploy Macie e processamento"
    echo "5. Deploy cliente Windows (automatizado)"
    echo "6. Verificar status das stacks"
    echo "7. Obter informa√ß√µes da infraestrutura"
    echo "8. Corrigir stacks problem√°ticas"
    echo "9. Cleanup (remover todas as stacks)"
    echo "10. Limpar configura√ß√µes salvas"
    echo "11. Sair"
    echo ""
    read -p "Escolha uma op√ß√£o: " choice
}

# Fun√ß√£o principal
main() {
    log "Iniciando FSx Compliance PoC Deploy Script (SEM KEY-PAIR)"
    
    # Verificar se os templates existem
    local templates=(
        "$CLOUDFORMATION_DIR/fsx-compliance-main.yaml"
        "$CLOUDFORMATION_DIR/fsx-storage.yaml"
        "$CLOUDFORMATION_DIR/macie-processing.yaml"
        "$CLOUDFORMATION_DIR/windows-client.yaml"
    )
    
    for template in "${templates[@]}"; do
        if [ ! -f "$template" ]; then
            error "Template n√£o encontrado: $template"
            exit 1
        fi
    done
    
    check_prerequisites
    
    while true; do
        show_menu
        
        case $choice in
            1)
                log "Iniciando deploy completo automatizado..."
                deploy_main_infrastructure && \
                deploy_storage && \
                deploy_macie && \
                deploy_windows_client && \
                check_stack_status && \
                get_outputs
                ;;
            2)
                deploy_main_infrastructure
                ;;
            3)
                deploy_storage
                ;;
            4)
                deploy_macie
                ;;
            5)
                deploy_windows_client
                ;;
            6)
                check_stack_status
                ;;
            7)
                get_outputs
                ;;
            8)
                fix_problematic_stacks
                ;;
            9)
                cleanup
                ;;
            10)
                clear_config
                ;;
            11)
                log "Saindo..."
                exit 0
                ;;
            *)
                warning "Op√ß√£o inv√°lida. Tente novamente."
                ;;
        esac
        
        echo ""
        read -p "Pressione Enter para continuar..."
    done
}

# Executar fun√ß√£o principal
main "$@"
