AWSTemplateFormatVersion: '2010-09-09'
Description: 'Windows EC2 Client para FSx Compliance PoC - SEM Key Pair (usa SSM)'

Parameters:
  MainStackName:
    Type: String
    Description: 'Nome da stack principal para importar valores'
  
  StorageStackName:
    Type: String
    Description: 'Nome da stack de storage para importar valores'
  
  InstanceType:
    Type: String
    Default: 't3.medium'
    AllowedValues: ['t3.medium', 't3.large', 't3.xlarge']
    Description: 'Tipo da inst√¢ncia EC2'

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0758218dcb57e4a14  # Windows Server 2022 Full Base (com SSM Agent + Interface Gr√°fica)
    us-west-2:
      AMI: ami-0312c9e5e6b4d1e5c  # Windows Server 2022 Full Base (com SSM Agent + Interface Gr√°fica)
    eu-west-1:
      AMI: ami-0d75513e7706cf2d9  # Windows Server 2022 Full Base (com SSM Agent + Interface Gr√°fica)

Resources:
  # ============================================================================
  # WINDOWS EC2 INSTANCE (SEM KEY PAIR)
  # ============================================================================
  
  WindowsClientInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      # KeyName removido - usando SSM Session Manager
      SubnetId: !ImportValue 
        Fn::Sub: '${MainStackName}-PrivateSubnet-ID'
      SecurityGroupIds:
        - !ImportValue 
            Fn::Sub: '${MainStackName}-WindowsClientSG-ID'
      IamInstanceProfile: !Ref WindowsInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          # Log de inicializa√ß√£o
          Start-Transcript -Path "C:\Windows\Temp\userdata.log"
          
          Write-Host "=== FSx Compliance PoC - Configura√ß√£o Automatizada ==="
          Write-Host "Inst√¢ncia configurada para funcionar SEM acesso RDP"
          Write-Host "Use AWS Systems Manager Session Manager para acesso se necess√°rio"
          
          # Definir vari√°veis do projeto
          $projectName = "${MainStackName}"
          
          # ============================================================================
          # VERIFICAR E CONFIGURAR SSM AGENT (J√Å PR√â-INSTALADO NA AMI)
          # ============================================================================
          Write-Host "üîß Verificando SSM Agent (pr√©-instalado na AMI)..."
          
          try {
              # Verificar se o servi√ßo existe e est√° rodando
              $ssmService = Get-Service -Name "AmazonSSMAgent" -ErrorAction Stop
              Write-Host "‚úÖ SSM Agent encontrado: $($ssmService.Status)"
              
              # Garantir que est√° rodando e configurado para iniciar automaticamente
              if ($ssmService.Status -ne "Running") {
                  Start-Service -Name "AmazonSSMAgent"
                  Write-Host "‚úÖ SSM Agent iniciado"
              }
              
              Set-Service -Name "AmazonSSMAgent" -StartupType Automatic
              Write-Host "‚úÖ SSM Agent configurado para inicializa√ß√£o autom√°tica"
              
              # Aguardar alguns segundos para o servi√ßo estabilizar
              Start-Sleep -Seconds 10
              
              # Verificar status final
              $finalStatus = Get-Service -Name "AmazonSSMAgent"
              Write-Host "üìä Status final do SSM Agent: $($finalStatus.Status)"
              
          } catch {
              Write-Host "‚ùå Erro ao configurar SSM Agent: $($_.Exception.Message)"
              Write-Host "‚ö†Ô∏è Tentando reinstalar SSM Agent como fallback..."
              
              # Fallback: instalar SSM Agent se houver problema
              try {
                  $ssmUrl = "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe"
                  Invoke-WebRequest -Uri $ssmUrl -OutFile "C:\Windows\Temp\AmazonSSMAgentSetup.exe"
                  Start-Process -FilePath "C:\Windows\Temp\AmazonSSMAgentSetup.exe" -ArgumentList "/S" -Wait
                  Start-Service -Name "AmazonSSMAgent"
                  Set-Service -Name "AmazonSSMAgent" -StartupType Automatic
                  Write-Host "‚úÖ SSM Agent reinstalado com sucesso"
              } catch {
                  Write-Host "‚ùå Falha na reinstala√ß√£o do SSM Agent: $($_.Exception.Message)"
              }
          }
          
          # ============================================================================
          # INSTALAR AWS CLI
          # ============================================================================
          Write-Host "üì• Instalando AWS CLI..."
          $ProgressPreference = 'SilentlyContinue'
          try {
              Invoke-WebRequest -Uri "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "C:\Windows\Temp\AWSCLIV2.msi"
              Start-Process msiexec.exe -Wait -ArgumentList '/I C:\Windows\Temp\AWSCLIV2.msi /quiet'
              Write-Host "‚úÖ AWS CLI instalado com sucesso"
          } catch {
              Write-Host "‚ùå Erro ao instalar AWS CLI: $($_.Exception.Message)"
          }
          
          # Adicionar AWS CLI ao PATH
          $env:PATH += ";C:\Program Files\Amazon\AWSCLIV2"
          [Environment]::SetEnvironmentVariable("PATH", $env:PATH, [EnvironmentVariableTarget]::Machine)
          
          # Instalar AWS Tools for PowerShell
          Write-Host "üì• Instalando AWS Tools for PowerShell..."
          try {
              Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
              Install-Module -Name AWS.Tools.Installer -Force -AllowClobber
              Install-AWSToolsModule AWS.Tools.S3,AWS.Tools.FSx,AWS.Tools.DirectoryService -Force
              Write-Host "‚úÖ AWS Tools for PowerShell instalado com sucesso"
          } catch {
              Write-Host "‚ùå Erro ao instalar AWS Tools: $($_.Exception.Message)"
          }
          
          # ============================================================================
          # INGRESSAR NO DOM√çNIO MANAGED AD (CR√çTICO PARA FSX)
          # ============================================================================
          Write-Host "üîê Configurando ingresso no dom√≠nio Managed AD..."
          
          try {
              # Obter informa√ß√µes do Managed AD
              $managedADId = "${StorageStackName}-ManagedAD"
              Write-Host "üìã Obtendo informa√ß√µes do Managed AD: $managedADId"
              
              # Aguardar Managed AD ficar dispon√≠vel
              $maxAttempts = 20
              $attempt = 0
              $adReady = $false
              
              do {
                  $attempt++
                  try {
                      $adInfo = aws ds describe-directories --directory-ids $managedADId --region ${AWS::Region} --output json | ConvertFrom-Json
                      if ($adInfo -and $adInfo.DirectoryDescriptions -and $adInfo.DirectoryDescriptions[0].Stage -eq "Active") {
                          $domainName = $adInfo.DirectoryDescriptions[0].Name
                          $dnsIpAddrs = $adInfo.DirectoryDescriptions[0].DnsIpAddrs
                          Write-Host "‚úÖ Managed AD dispon√≠vel: $domainName"
                          Write-Host "üì° DNS IPs: $($dnsIpAddrs -join ', ')"
                          $adReady = $true
                      } else {
                          Write-Host "‚è≥ Tentativa $attempt/$maxAttempts - Managed AD ainda n√£o dispon√≠vel"
                          Start-Sleep -Seconds 60
                      }
                  } catch {
                      Write-Host "‚ö†Ô∏è Erro ao verificar Managed AD (tentativa $attempt): $($_.Exception.Message)"
                      Start-Sleep -Seconds 60
                  }
              } while (-not $adReady -and $attempt -lt $maxAttempts)
              
              if ($adReady) {
                  # Configurar DNS para apontar para o Managed AD
                  Write-Host "üîß Configurando DNS para Managed AD..."
                  $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
                  Set-DnsClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses $dnsIpAddrs
                  Write-Host "‚úÖ DNS configurado para Managed AD"
                  
                  # Aguardar propaga√ß√£o DNS
                  Write-Host "‚è≥ Aguardando propaga√ß√£o DNS..."
                  Start-Sleep -Seconds 30
                  
                  # Obter credenciais do dom√≠nio (usando a senha gerada)
                  $domainUser = "Admin"
                  
                  # Tentar obter a senha do Systems Manager Parameter Store
                  try {
                      $passwordParam = aws ssm get-parameter --name "${StorageStackName}-ADPassword" --with-decryption --region ${AWS::Region} --output text --query 'Parameter.Value'
                      if ($passwordParam) {
                          $securePassword = ConvertTo-SecureString $passwordParam -AsPlainText -Force
                          $credential = New-Object System.Management.Automation.PSCredential("$domainName\$domainUser", $securePassword)
                          
                          # Ingressar no dom√≠nio
                          Write-Host "üîó Ingressando no dom√≠nio: $domainName"
                          Add-Computer -DomainName $domainName -Credential $credential -Restart -Force
                          Write-Host "‚úÖ Ingresso no dom√≠nio iniciado - inst√¢ncia ser√° reiniciada"
                      } else {
                          Write-Host "‚ùå N√£o foi poss√≠vel obter a senha do dom√≠nio"
                      }
                  } catch {
                      Write-Host "‚ùå Erro ao ingressar no dom√≠nio: $($_.Exception.Message)"
                      Write-Host "‚ö†Ô∏è Ser√° necess√°rio ingressar manualmente no dom√≠nio para acessar FSx"
                  }
              } else {
                  Write-Host "‚ùå Managed AD n√£o ficou dispon√≠vel no tempo esperado"
                  Write-Host "‚ö†Ô∏è Ser√° necess√°rio ingressar manualmente no dom√≠nio para acessar FSx"
              }
          } catch {
              Write-Host "‚ùå Erro na configura√ß√£o do dom√≠nio: $($_.Exception.Message)"
              Write-Host "‚ö†Ô∏è Ser√° necess√°rio ingressar manualmente no dom√≠nio para acessar FSx"
          }
          
          # Criar diret√≥rio para scripts
          New-Item -ItemType Directory -Path "C:\FSxCompliance" -Force
          Write-Host "üìÅ Diret√≥rio C:\FSxCompliance criado"
          
          # Aguardar FSx ficar dispon√≠vel
          Write-Host "‚è≥ Aguardando FSx ficar dispon√≠vel..."
          $maxAttempts = 30
          $attempt = 0
          $fsxReady = $false
          
          do {
              $attempt++
              try {
                  $fsxInfo = aws fsx describe-file-systems --region ${AWS::Region} --query "FileSystems[?Tags[?Key==``Project`` && Value==``$projectName``]]" --output json | ConvertFrom-Json
                  if ($fsxInfo -and $fsxInfo.Count -gt 0 -and $fsxInfo[0].Lifecycle -eq "AVAILABLE") {
                      $fsxDns = $fsxInfo[0].DNSName
                      Write-Host "‚úÖ FSx dispon√≠vel: $fsxDns"
                      $fsxReady = $true
                  } else {
                      Write-Host "‚è≥ Tentativa $attempt/$maxAttempts - FSx ainda n√£o dispon√≠vel"
                      Start-Sleep -Seconds 60
                  }
              } catch {
                  Write-Host "‚è≥ Tentativa $attempt/$maxAttempts - Verificando FSx..."
                  Start-Sleep -Seconds 60
              }
          } while (-not $fsxReady -and $attempt -lt $maxAttempts)
          
          if ($fsxReady) {
              # Tentar montar FSx automaticamente
              Write-Host "üîó Tentando montar FSx como drive Z:..."
              try {
                  # Usar credenciais do dom√≠nio (se dispon√≠vel)
                  net use Z: "\\$fsxDns\share" /persistent:yes
                  if ($LASTEXITCODE -eq 0) {
                      Write-Host "‚úÖ FSx montado com sucesso como Z:"
                      
                      # Criar diret√≥rio de teste
                      New-Item -ItemType Directory -Path "Z:\ComplianceDocs" -Force
                      Write-Host "üìÅ Diret√≥rio Z:\ComplianceDocs criado"
                  } else {
                      Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel montar FSx automaticamente"
                      Write-Host "   Use Session Manager para conectar e montar manualmente:"
                      Write-Host "   net use Z: \\$fsxDns\share"
                  }
              } catch {
                  Write-Host "‚ö†Ô∏è Erro ao montar FSx: $($_.Exception.Message)"
              }
          } else {
              Write-Host "‚ùå FSx n√£o ficou dispon√≠vel no tempo esperado"
          }
          
          # Script de sincroniza√ß√£o FSx -> S3 (AUTOMATIZADO)
          $syncScript = @'
          # Script de Sincroniza√ß√£o FSx para S3 - AUTOMATIZADO
          param(
              [string]$FSxPath = "Z:\ComplianceDocs",
              [string]$S3Bucket = "${StorageStackName}-ComplianceBucket",
              [string]$S3Prefix = "fsx-sync/"
          )
          
          $logFile = "C:\FSxCompliance\sync-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
          
          function Write-Log {
              param([string]$Message)
              $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              "$timestamp - $Message" | Out-File -FilePath $logFile -Append
              Write-Host "$timestamp - $Message"
          }
          
          Write-Log "=== SINCRONIZA√á√ÉO AUTOMATIZADA FSx -> S3 ==="
          Write-Log "FSx Path: $FSxPath"
          Write-Log "S3 Bucket: $S3Bucket"
          
          # Verificar se o diret√≥rio FSx existe
          if (!(Test-Path $FSxPath)) {
              Write-Log "‚ö†Ô∏è Diret√≥rio FSx n√£o encontrado: $FSxPath"
              Write-Log "   Criando diret√≥rio..."
              try {
                  New-Item -ItemType Directory -Path $FSxPath -Force
                  Write-Log "‚úÖ Diret√≥rio criado: $FSxPath"
              } catch {
                  Write-Log "‚ùå Erro ao criar diret√≥rio: $($_.Exception.Message)"
                  exit 1
              }
          }
          
          # Extens√µes de arquivo para sincronizar
          $extensions = @("*.pdf", "*.doc", "*.docx", "*.txt", "*.xlsx", "*.ppt", "*.pptx")
          $totalFiles = 0
          $successFiles = 0
          
          foreach ($extension in $extensions) {
              Write-Log "üîç Processando arquivos: $extension"
              
              $files = Get-ChildItem -Path $FSxPath -Filter $extension -Recurse -File -ErrorAction SilentlyContinue
              
              foreach ($file in $files) {
                  $totalFiles++
                  try {
                      $relativePath = $file.FullName.Substring($FSxPath.Length + 1)
                      $s3Key = "$S3Prefix$relativePath" -replace "\\", "/"
                      
                      Write-Log "üì§ Sincronizando: $($file.Name) -> $s3Key"
                      
                      # Upload para S3 com metadados
                      aws s3 cp $file.FullName "s3://$S3Bucket/$s3Key" `
                          --metadata "source=fsx,original-path=$($file.FullName),file-size=$($file.Length),last-modified=$($file.LastWriteTime.ToString('yyyy-MM-ddTHH:mm:ssZ')),sync-type=automated" `
                          --storage-class STANDARD_IA `
                          --no-progress `
                          --region ${AWS::Region}
                      
                      if ($LASTEXITCODE -eq 0) {
                          Write-Log "‚úÖ Sucesso: $($file.Name)"
                          $successFiles++
                      } else {
                          Write-Log "‚ùå Erro no upload: $($file.Name)"
                      }
                  }
                  catch {
                      Write-Log "‚ùå Exce√ß√£o ao processar $($file.Name): $($_.Exception.Message)"
                  }
              }
          }
          
          Write-Log "=== RESUMO DA SINCRONIZA√á√ÉO ==="
          Write-Log "Total de arquivos processados: $totalFiles"
          Write-Log "Arquivos sincronizados com sucesso: $successFiles"
          Write-Log "Taxa de sucesso: $(if($totalFiles -gt 0){[math]::Round(($successFiles/$totalFiles)*100,2)}else{0})%"
          Write-Log "Sincroniza√ß√£o conclu√≠da"
          '@
          
          $syncScript | Out-File -FilePath "C:\FSxCompliance\sync-fsx-to-s3.ps1" -Encoding UTF8
          Write-Host "üìú Script de sincroniza√ß√£o criado"
          
          # Script para criar arquivos de teste AUTOMATICAMENTE
          $testScript = @'
          # Script para criar arquivos de teste - EXECU√á√ÉO AUTOM√ÅTICA
          param(
              [string]$TestPath = "Z:\ComplianceDocs\TestFiles"
          )
          
          Write-Host "=== CRIANDO ARQUIVOS DE TESTE AUTOMATICAMENTE ==="
          
          # Criar diret√≥rio de teste
          try {
              New-Item -ItemType Directory -Path $TestPath -Force
              Write-Host "‚úÖ Diret√≥rio de teste criado: $TestPath"
          } catch {
              Write-Host "‚ùå Erro ao criar diret√≥rio de teste: $($_.Exception.Message)"
              return
          }
          
          # Arquivo com dados sens√≠veis (simulado)
          $sensitiveContent = @"
          DOCUMENTO CONFIDENCIAL - TESTE AUTOMATIZADO
          
          Este documento foi criado automaticamente para testar a detec√ß√£o de dados sens√≠veis.
          
          Dados pessoais de exemplo (FICT√çCIOS):
          - CPF: 123.456.789-00
          - Email: teste@exemplo.com
          - Telefone: (11) 99999-9999
          - Cart√£o de Cr√©dito: 4111-1111-1111-1111
          
          RESTRITO - Documento de teste para compliance
          Criado em: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
          "@
          
          try {
              $sensitiveContent | Out-File -FilePath "$TestPath\documento_confidencial_teste.txt" -Encoding UTF8
              Write-Host "‚úÖ Arquivo sens√≠vel criado: documento_confidencial_teste.txt"
          } catch {
              Write-Host "‚ùå Erro ao criar arquivo sens√≠vel: $($_.Exception.Message)"
          }
          
          # Arquivo normal (sem dados sens√≠veis)
          $normalContent = @"
          Manual do Usu√°rio - Teste Automatizado
          
          Este √© um documento p√∫blico com informa√ß√µes gerais para teste.
          
          Instru√ß√µes de uso:
          1. Abrir o sistema
          2. Fazer login
          3. Navegar pelos menus
          4. Executar opera√ß√µes
          
          Suporte: suporte@empresa.com
          Vers√£o: 1.0
          Criado em: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
          "@
          
          try {
              $normalContent | Out-File -FilePath "$TestPath\manual_usuario_teste.txt" -Encoding UTF8
              Write-Host "‚úÖ Arquivo normal criado: manual_usuario_teste.txt"
          } catch {
              Write-Host "‚ùå Erro ao criar arquivo normal: $($_.Exception.Message)"
          }
          
          # Arquivo com palavra-chave espec√≠fica
          $keywordContent = @"
          Relat√≥rio de Vendas - SIGILOSO
          
          Este relat√≥rio cont√©m informa√ß√µes CONFIDENCIAIS sobre vendas.
          
          Dados do trimestre:
          - Vendas totais: R$ 1.000.000
          - Clientes ativos: 500
          - Margem de lucro: 25%
          
          Classifica√ß√£o: RESTRITO
          Acesso limitado apenas √† diretoria
          Criado em: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
          "@
          
          try {
              $keywordContent | Out-File -FilePath "$TestPath\relatorio_sigiloso_teste.txt" -Encoding UTF8
              Write-Host "‚úÖ Arquivo com palavras-chave criado: relatorio_sigiloso_teste.txt"
          } catch {
              Write-Host "‚ùå Erro ao criar arquivo com palavras-chave: $($_.Exception.Message)"
          }
          
          Write-Host "=== ARQUIVOS DE TESTE CRIADOS COM SUCESSO ==="
          Write-Host "Localiza√ß√£o: $TestPath"
          Write-Host "Total: 3 arquivos (1 sens√≠vel, 1 normal, 1 com palavras-chave)"
          '@
          
          $testScript | Out-File -FilePath "C:\FSxCompliance\create-test-files.ps1" -Encoding UTF8
          Write-Host "üìú Script de teste criado"
          
          # Executar cria√ß√£o de arquivos de teste AUTOMATICAMENTE
          if (Test-Path "Z:\ComplianceDocs") {
              Write-Host "üß™ Executando cria√ß√£o de arquivos de teste..."
              try {
                  & "C:\FSxCompliance\create-test-files.ps1"
                  Write-Host "‚úÖ Arquivos de teste criados automaticamente"
              } catch {
                  Write-Host "‚ùå Erro ao criar arquivos de teste: $($_.Exception.Message)"
              }
          }
          
          # Executar sincroniza√ß√£o inicial AUTOMATICAMENTE
          Write-Host "üîÑ Executando sincroniza√ß√£o inicial..."
          try {
              & "C:\FSxCompliance\sync-fsx-to-s3.ps1"
              Write-Host "‚úÖ Sincroniza√ß√£o inicial executada"
          } catch {
              Write-Host "‚ùå Erro na sincroniza√ß√£o inicial: $($_.Exception.Message)"
          }
          
          # Criar tarefa agendada para sincroniza√ß√£o autom√°tica
          Write-Host "‚è∞ Configurando sincroniza√ß√£o autom√°tica..."
          try {
              $action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-File C:\FSxCompliance\sync-fsx-to-s3.ps1"
              $trigger = New-ScheduledTaskTrigger -Daily -At "02:00AM"
              $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
              
              Register-ScheduledTask -TaskName "FSxComplianceSync" -Action $action -Trigger $trigger -Settings $settings -Description "Sincroniza√ß√£o di√°ria FSx para S3" -Force
              Write-Host "‚úÖ Tarefa agendada criada: FSxComplianceSync (di√°ria √†s 02:00)"
          } catch {
              Write-Host "‚ùå Erro ao criar tarefa agendada: $($_.Exception.Message)"
          }
          
          Write-Host ""
          Write-Host "=== CONFIGURA√á√ÉO AUTOMATIZADA CONCLU√çDA ==="
          Write-Host "‚úÖ AWS CLI instalado"
          Write-Host "‚úÖ AWS Tools for PowerShell instalado"
          Write-Host "‚úÖ Scripts de sincroniza√ß√£o criados"
          Write-Host "‚úÖ Arquivos de teste criados (se FSx dispon√≠vel)"
          Write-Host "‚úÖ Sincroniza√ß√£o inicial executada"
          Write-Host "‚úÖ Tarefa agendada configurada"
          Write-Host ""
          Write-Host "üìç PR√ìXIMOS PASSOS:"
          Write-Host "1. Aguarde alguns minutos para o Macie processar os arquivos"
          Write-Host "2. Verifique o email configurado para alertas de compliance"
          Write-Host "3. Use AWS Systems Manager Session Manager se precisar acessar a inst√¢ncia"
          Write-Host "4. Monitore os logs em C:\FSxCompliance\"
          Write-Host ""
          Write-Host "üîç MONITORAMENTO:"
          Write-Host "- S3 Bucket: ${StorageStackName}-ComplianceBucket"
          Write-Host "- Macie Console: https://console.aws.amazon.com/macie/"
          Write-Host "- CloudWatch Logs: /aws/lambda/fsx-compliance-poc-*"
          Write-Host ""
          
          Stop-Transcript
          </powershell>
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-windows-client-automated'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Purpose
          Value: 'FSx Compliance Client - Automated'
        - Key: AccessMethod
          Value: 'SSM Session Manager'

  # ============================================================================
  # IAM ROLE PARA EC2 (COM SSM)
  # ============================================================================
  
  WindowsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${ProjectName}-windows-instance-role-ssm'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore  # Para Session Manager
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy   # Para CloudWatch
      Policies:
        - PolicyName: FSxCompliancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBuckets'
                Resource: 
                  - !Sub 
                    - '${BucketArn}'
                    - BucketArn: !Sub 
                        - 'arn:aws:s3:::${BucketName}'
                        - BucketName: !ImportValue 
                            Fn::Sub: '${StorageStackName}-ComplianceBucket'
                  - !Sub 
                    - '${BucketArn}/*'
                    - BucketArn: !Sub 
                        - 'arn:aws:s3:::${BucketName}'
                        - BucketName: !ImportValue 
                            Fn::Sub: '${StorageStackName}-ComplianceBucket'
              - Effect: Allow
                Action:
                  - 's3:ListAllMyBuckets'
                  - 's3:GetBucketLocation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'fsx:DescribeFileSystems'
                  - 'fsx:DescribeBackups'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ds:DescribeDirectories'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'macie2:GetMacieSession'
                  - 'macie2:ListFindings'
                  - 'macie2:GetFindings'
                  - 'macie2:ListClassificationJobs'
                  - 'macie2:DescribeClassificationJob'
                  - 'macie2:CreateClassificationJob'
                  - 'macie2:ListCustomDataIdentifiers'
                  - 'macie2:GetCustomDataIdentifier'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sts:GetCallerIdentity'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-windows-instance-role-ssm'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'

  WindowsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 
        - '${ProjectName}-windows-instance-profile-ssm'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      Roles:
        - !Ref WindowsInstanceRole

Outputs:
  WindowsInstanceId:
    Description: 'ID da inst√¢ncia Windows EC2 (sem key-pair)'
    Value: !Ref WindowsClientInstance
    Export:
      Name: !Sub '${AWS::StackName}-WindowsInstance'

  WindowsInstancePrivateIP:
    Description: 'IP privado da inst√¢ncia Windows'
    Value: !GetAtt WindowsClientInstance.PrivateIp
    Export:
      Name: !Sub '${AWS::StackName}-WindowsInstanceIP'

  AccessMethod:
    Description: 'M√©todo de acesso √† inst√¢ncia'
    Value: 'AWS Systems Manager Session Manager'
    Export:
      Name: !Sub '${AWS::StackName}-AccessMethod'

  SSMSessionCommand:
    Description: 'Comando para conectar via SSM'
    Value: !Sub 'aws ssm start-session --target ${WindowsClientInstance} --region ${AWS::Region}'
    Export:
      Name: !Sub '${AWS::StackName}-SSMCommand'
