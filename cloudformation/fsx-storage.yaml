AWSTemplateFormatVersion: '2010-09-09'
Description: 'FSx for Windows e S3 Bucket para Compliance PoC - Notificação S3 Corrigida'

Parameters:
  MainStackName:
    Type: String
    Description: 'Nome da stack principal para importar valores'
  
  FSxStorageCapacity:
    Type: Number
    Default: 32
    MinValue: 32
    MaxValue: 65536
    Description: 'Capacidade de armazenamento do FSx em GB'

Resources:
  # ============================================================================
  # S3 BUCKET PARA COMPLIANCE (SEM NOTIFICAÇÕES)
  # ============================================================================
  
  ComplianceBucket:
    Type: AWS::S3::Bucket
    Properties:
      # ✅ CORRIGIDO: Nome único gerado pelo CloudFormation
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ComplianceDataLifecycle
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
              - TransitionInDays: 365
                StorageClass: DEEP_ARCHIVE
      # ✅ CORRIGIDO: NotificationConfiguration removida para evitar dependência circular
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-compliance-bucket'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Purpose
          Value: 'FSx Compliance Scanning'

  # ============================================================================
  # IAM ROLE PARA LAMBDA (CRIADO PRIMEIRO)
  # ============================================================================
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${ProjectName}-lambda-execution-role'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MacieAndS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'macie2:CreateClassificationJob'
                  - 'macie2:GetClassificationJob'
                  - 'macie2:ListClassificationJobs'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectMetadata'
                  - 's3:GetObjectTagging'
                  - 's3:PutObjectTagging'
                Resource: !Sub 
                  - '${BucketArn}/*'
                  - BucketArn: !GetAtt ComplianceBucket.Arn
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource: !GetAtt ComplianceBucket.Arn
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-lambda-role'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'

  # ============================================================================
  # LAMBDA FUNCTION (CRIADA APÓS O ROLE)
  # ============================================================================
  
  TriggerMacieLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: !Sub 
        - '${ProjectName}-trigger-macie'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      Runtime: python3.9
      Handler: index.lambda_handler
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          BUCKET_NAME: !Ref ComplianceBucket
          PROJECT_NAME: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      Code:
        ZipFile: |
          import boto3
          import json
          import urllib.parse
          import os
          from datetime import datetime
          
          def lambda_handler(event, context):
              macie = boto3.client('macie2')
              s3 = boto3.client('s3')
              
              print(f"Evento recebido: {json.dumps(event)}")
              
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = urllib.parse.unquote_plus(record['s3']['object']['key'])
                  
                  print(f"Processando arquivo: s3://{bucket}/{key}")
                  
                  # Verificar extensão do arquivo
                  file_extension = key.split('.')[-1].lower()
                  scannable_extensions = ['pdf', 'doc', 'docx', 'txt', 'xlsx', 'ppt', 'pptx']
                  
                  if file_extension in scannable_extensions:
                      try:
                          # Criar job de classificação one-time
                          job_name = f"FSxFile-{key.replace('/', '-').replace('.', '-')}-{context.aws_request_id[:8]}"
                          
                          response = macie.create_classification_job(
                              jobType='ONE_TIME',
                              name=job_name,
                              description=f'Scan para arquivo FSx: {key}',
                              s3JobDefinition={
                                  'bucketDefinitions': [{
                                      'accountId': context.invoked_function_arn.split(':')[4],
                                      'buckets': [bucket]
                                  }],
                                  'scoping': {
                                      'includes': {
                                          'and': [{
                                              'simpleScopeTerm': {
                                                  'comparator': 'EQ',
                                                  'key': 'OBJECT_KEY',
                                                  'values': [key]
                                              }
                                          }]
                                      }
                                  }
                              }
                          )
                          
                          print(f"Job de classificação criado: {response['jobId']}")
                          
                          # Adicionar tags ao objeto S3
                          s3.put_object_tagging(
                              Bucket=bucket,
                              Key=key,
                              Tagging={
                                  'TagSet': [
                                      {'Key': 'MacieJobId', 'Value': response['jobId']},
                                      {'Key': 'ScanStatus', 'Value': 'PENDING'},
                                      {'Key': 'ProcessedAt', 'Value': datetime.utcnow().isoformat()}
                                  ]
                              }
                          )
                          
                      except Exception as e:
                          print(f"Erro ao criar job de classificação: {str(e)}")
                          
                          # Log do erro no CloudWatch
                          import traceback
                          print(f"Stack trace: {traceback.format_exc()}")
                  
                  else:
                      print(f"Arquivo ignorado (extensão não suportada): {key}")
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Processamento concluído')
              }
      Role: !GetAtt LambdaExecutionRole.Arn
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-trigger-macie-lambda'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'

  # ============================================================================
  # PERMISSÃO PARA S3 INVOCAR LAMBDA (CRIADA APÓS LAMBDA)
  # ============================================================================
  
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: TriggerMacieLambda
    Properties:
      FunctionName: !Ref TriggerMacieLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt ComplianceBucket.Arn  # ✅ CORRIGIDO: Usar ARN do bucket, não com /*

  # ============================================================================
  # CONFIGURAÇÃO DE NOTIFICAÇÃO S3 (CUSTOM RESOURCE)
  # ============================================================================
  
  # Lambda para configurar notificações S3
  S3NotificationLambda:
    Type: AWS::Lambda::Function
    DependsOn: S3InvokeLambdaPermission
    Properties:
      FunctionName: !Sub 
        - '${ProjectName}-s3-notification-config'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      Runtime: python3.9
      Handler: index.lambda_handler
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import time
          
          def lambda_handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  lambda_client = boto3.client('lambda')
                  
                  bucket_name = event['ResourceProperties']['BucketName']
                  lambda_arn = event['ResourceProperties']['LambdaArn']
                  
                  print(f"Configurando notificações para bucket: {bucket_name}")
                  print(f"Lambda ARN: {lambda_arn}")
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Aguardar um pouco para garantir que a permissão foi propagada
                      time.sleep(10)
                      
                      # Verificar se a Lambda existe e está ativa
                      try:
                          lambda_client.get_function(FunctionName=lambda_arn)
                          print("Lambda function verificada com sucesso")
                      except Exception as e:
                          print(f"Erro ao verificar Lambda: {str(e)}")
                          raise e
                      
                      # Configurar notificações com configuração simplificada
                      notification_config = {
                          'LambdaFunctionConfigurations': [
                              {
                                  'Id': 'FSxComplianceNotification',
                                  'LambdaFunctionArn': lambda_arn,
                                  'Events': ['s3:ObjectCreated:*'],
                                  'Filter': {
                                      'Key': {
                                          'FilterRules': [
                                              {'Name': 'prefix', 'Value': 'fsx-sync/'}
                                          ]
                                      }
                                  }
                              }
                          ]
                      }
                      
                      print(f"Aplicando configuração: {json.dumps(notification_config, indent=2)}")
                      
                      # Aplicar configuração
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration=notification_config
                      )
                      
                      print(f"Notificações configuradas com sucesso para bucket: {bucket_name}")
                      
                  elif event['RequestType'] == 'Delete':
                      # Remover notificações
                      try:
                          s3.put_bucket_notification_configuration(
                              Bucket=bucket_name,
                              NotificationConfiguration={}
                          )
                          print(f"Notificações removidas do bucket: {bucket_name}")
                      except Exception as e:
                          print(f"Erro ao remover notificações (pode ser esperado se bucket já foi deletado): {str(e)}")
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'Message': f'Notificações configuradas para {bucket_name}'
                  })
                  
              except Exception as e:
                  print(f"Erro: {str(e)}")
                  import traceback
                  print(f"Stack trace: {traceback.format_exc()}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })
      Role: !GetAtt S3NotificationLambdaRole.Arn

  S3NotificationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3NotificationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !GetAtt ComplianceBucket.Arn
              - Effect: Allow
                Action:
                  - 'lambda:GetFunction'
                Resource: !Sub 
                  - '${LambdaArn}'
                  - LambdaArn: !GetAtt TriggerMacieLambda.Arn

  # Custom Resource para configurar notificações
  S3NotificationConfiguration:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: 
      - S3InvokeLambdaPermission
      - S3NotificationLambda
    Properties:
      ServiceToken: !GetAtt S3NotificationLambda.Arn
      BucketName: !Ref ComplianceBucket
      LambdaArn: !GetAtt TriggerMacieLambda.Arn
      # Adicionar um valor único para forçar update quando necessário
      Version: "1.0"

  # ============================================================================
  # SENHA PARA MANAGED AD
  # ============================================================================
  
  GeneratePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 
        - '${ProjectName}-generate-password'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      Runtime: python3.9
      Handler: index.lambda_handler
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import secrets
          import string
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Gerar senha segura
                      alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
                      password = ''.join(secrets.choice(alphabet) for i in range(16))
                      
                      # Garantir que tem pelo menos uma maiúscula, minúscula, número e símbolo
                      password = (
                          secrets.choice(string.ascii_uppercase) +
                          secrets.choice(string.ascii_lowercase) +
                          secrets.choice(string.digits) +
                          secrets.choice("!@#$%^&*") +
                          password[4:]
                      )
                      
                      # Embaralhar
                      password_list = list(password)
                      secrets.SystemRandom().shuffle(password_list)
                      password = ''.join(password_list)
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Password': password
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(f"Erro: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Role: !GetAtt PasswordLambdaRole.Arn

  PasswordLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GeneratePassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GeneratePasswordLambda.Arn

  ADPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub 
        - '/${ProjectName}/ad/password'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      Type: String
      Value: !GetAtt GeneratePassword.Password
      Description: 'Senha gerada automaticamente para o Managed AD'
      Tags:
        Project: !ImportValue 
          Fn::Sub: '${MainStackName}-ProjectName'

  # ============================================================================
  # MANAGED ACTIVE DIRECTORY
  # ============================================================================
  
  ManagedAD:
    Type: AWS::DirectoryService::MicrosoftAD
    DependsOn: ADPassword
    Properties:
      Name: !Sub 
        - '${ProjectName}.local'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      Password: !GetAtt GeneratePassword.Password
      Edition: Standard
      VpcSettings:
        VpcId: !ImportValue 
          Fn::Sub: '${MainStackName}-VPC-ID'
        SubnetIds:
          - !ImportValue 
              Fn::Sub: '${MainStackName}-PrivateSubnet-ID'
          - !Ref PrivateSubnet2

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue 
        Fn::Sub: '${MainStackName}-VPC-ID'
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-private-subnet-2'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'

  # ============================================================================
  # FSX FOR WINDOWS FILE SYSTEM
  # ============================================================================
  
  FSxFileSystem:
    Type: AWS::FSx::FileSystem
    DependsOn: ManagedAD
    Properties:
      FileSystemType: WINDOWS
      StorageCapacity: !Ref FSxStorageCapacity
      StorageType: SSD
      SubnetIds:
        - !ImportValue 
            Fn::Sub: '${MainStackName}-PrivateSubnet-ID'
      SecurityGroupIds:
        - !ImportValue 
            Fn::Sub: '${MainStackName}-FSxSG-ID'
      WindowsConfiguration:
        ActiveDirectoryId: !Ref ManagedAD
        ThroughputCapacity: 8
        WeeklyMaintenanceStartTime: '1:00:00'
        DailyAutomaticBackupStartTime: '01:00'
        AutomaticBackupRetentionDays: 7
        CopyTagsToBackups: true
        DeploymentType: SINGLE_AZ_2
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-fsx-windows'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Purpose
          Value: 'Compliance PoC File Server'

  # ============================================================================
  # AWS DATASYNC PARA SINCRONIZAÇÃO FSX → S3
  # ============================================================================
  
  # IAM Role para DataSync
  DataSyncRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${ProjectName}-datasync-role'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: datasync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: FSxDataSyncPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - fsx:DescribeFileSystems
                  - fsx:DescribeBackups
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-datasync-role'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'

  # CloudWatch Log Group para DataSync
  DataSyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 
        - '/aws/datasync/${ProjectName}'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      RetentionInDays: 14

  # DataSync Location para FSx
  DataSyncLocationFSx:
    Type: AWS::DataSync::LocationFSxWindows
    DependsOn: FSxFileSystem
    Properties:
      FsxFilesystemArn: !GetAtt FSxFileSystem.ResourceARN
      SecurityGroupArns:
        - !Sub 
          - 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${SecurityGroupId}'
          - SecurityGroupId: !ImportValue 
              Fn::Sub: '${MainStackName}-FSxSG-ID'
      Subdirectory: /
      User: Admin
      Password: !GetAtt GeneratePassword.Password
      Domain: !Sub 
        - '${ProjectName}.local'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-datasync-fsx-location'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'

  # DataSync Location para S3
  DataSyncLocationS3:
    Type: AWS::DataSync::LocationS3
    Properties:
      S3BucketArn: !GetAtt ComplianceBucket.Arn
      S3Config:
        BucketAccessRoleArn: !GetAtt DataSyncRole.Arn
      Subdirectory: /fsx-sync/
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-datasync-s3-location'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'

  # DataSync Task para sincronização
  DataSyncTask:
    Type: AWS::DataSync::Task
    Properties:
      Name: !Sub 
        - '${ProjectName}-fsx-to-s3-sync'
        - ProjectName: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'
      SourceLocationArn: !Ref DataSyncLocationFSx
      DestinationLocationArn: !Ref DataSyncLocationS3
      CloudWatchLogGroupArn: !GetAtt DataSyncLogGroup.Arn
      Options:
        VerifyMode: POINT_IN_TIME_CONSISTENT
        OverwriteMode: ALWAYS
        PreserveDeletedFiles: REMOVE
        PreserveDevices: NONE
        PosixPermissions: NONE
        BytesPerSecond: -1
        TaskQueueing: ENABLED
        LogLevel: TRANSFER
        TransferMode: CHANGED
      Schedule:
        ScheduleExpression: 'cron(0 2 * * ? *)'  # Diariamente às 02:00 UTC
      Tags:
        - Key: Name
          Value: !Sub 
            - '${ProjectName}-fsx-to-s3-sync-task'
            - ProjectName: !ImportValue 
                Fn::Sub: '${MainStackName}-ProjectName'
        - Key: Project
          Value: !ImportValue 
            Fn::Sub: '${MainStackName}-ProjectName'

Outputs:
  ComplianceBucketName:
    Description: 'Nome do bucket S3 para compliance'
    Value: !Ref ComplianceBucket
    Export:
      Name: !Sub '${AWS::StackName}-ComplianceBucket'

  ComplianceBucketArn:
    Description: 'ARN do bucket S3 para compliance'
    Value: !GetAtt ComplianceBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ComplianceBucketArn'

  FSxFileSystemId:
    Description: 'ID do FSx File System'
    Value: !Ref FSxFileSystem
    Export:
      Name: !Sub '${AWS::StackName}-FSxFileSystem'

  FSxDNSName:
    Description: 'DNS Name do FSx File System'
    Value: !GetAtt FSxFileSystem.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-FSxDNSName'

  ManagedADId:
    Description: 'ID do Managed Active Directory'
    Value: !Ref ManagedAD
    Export:
      Name: !Sub '${AWS::StackName}-ManagedAD'

  ManagedADName:
    Description: 'Nome do Managed Active Directory'
    Value: !Sub 
      - '${ProjectName}.local'
      - ProjectName: !ImportValue 
          Fn::Sub: '${MainStackName}-ProjectName'
    Export:
      Name: !Sub '${AWS::StackName}-ManagedADName'

  TriggerMacieLambdaArn:
    Description: 'ARN da Lambda function para trigger do Macie'
    Value: !GetAtt TriggerMacieLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TriggerMacieLambda'

  ADPasswordParameterName:
    Description: 'Nome do parâmetro SSM com a senha do AD'
    Value: !Ref ADPassword
    Export:
      Name: !Sub '${AWS::StackName}-ADPasswordParameter'

  S3NotificationStatus:
    Description: 'Status da configuração de notificações S3'
    Value: !GetAtt S3NotificationConfiguration.Message
    Export:
      Name: !Sub '${AWS::StackName}-S3NotificationStatus'

  DataSyncTaskArn:
    Description: 'ARN da tarefa DataSync para sincronização FSx → S3'
    Value: !Ref DataSyncTask
    Export:
      Name: !Sub '${AWS::StackName}-DataSyncTask'

  DataSyncLocationFSxArn:
    Description: 'ARN da localização FSx no DataSync'
    Value: !Ref DataSyncLocationFSx
    Export:
      Name: !Sub '${AWS::StackName}-DataSyncLocationFSx'

  DataSyncLocationS3Arn:
    Description: 'ARN da localização S3 no DataSync'
    Value: !Ref DataSyncLocationS3
    Export:
      Name: !Sub '${AWS::StackName}-DataSyncLocationS3'
